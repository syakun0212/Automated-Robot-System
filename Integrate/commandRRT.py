import math
import logging
import time

import numpy as np

from RobotCore.Core import Core
from idl_data.RobotState_data.RobotState_build import RobotState

logging.basicConfig(level=logging.DEBUG)

def linearTrapezoid(d,vMax,a):
    # Return keypoints in velocity profile
    accelTime = vMax/a
    
    accelD = accelTime*vMax
    dLeft = d - accelD
    
    if(dLeft >= 0):
        
        coastTime = dLeft / vMax
        return np.array([[0.0,0.0], [accelTime, vMax], [accelTime+coastTime, vMax], [accelTime+coastTime+accelTime,0.0]])
    else:
        
        accelTime = math.sqrt(d / a)
        vCoast = accelTime * a
        return np.array([[0.0,0.0], [accelTime, vCoast], [accelTime+accelTime, 0.0]])

def linearInterp(profile, t):
    # Check sorted by time
    if(np.all(np.diff(profile[:,0]) < 0)):
        # Decreasing time
        raise ValueError("Time not sorted")
    
    n = len(profile)
    # Get t section
    t = np.expand_dims(t,0)
    
    profileT = np.expand_dims(profile[:,0], -1)
    profileV = np.expand_dims(profile[:,1], -1)
    
    pre = t >= profileT
    post = t <= profileT
    
    v = np.zeros((t.shape[1]), dtype=np.float)
    
    # Check inside of range
    insideMask = np.logical_and(np.any(post, axis=0), np.any(pre, axis=0))
    
    preInd = n-np.argmax(pre[::-1], axis=0)-1
    postInd = np.argmax(post, axis=0)

    # Same
    sameMask = preInd == postInd
    
    mask = np.logical_and(sameMask, insideMask)
    v[mask] = profile[preInd[mask],1]
    
    # Interpolate Mask
    # Preind always less than postind in sorted list
    interpMask = preInd < postInd
    mask = np.logical_and(interpMask, insideMask)
    tPre = profile[preInd[mask],0]
    tPost = profile[postInd[mask],0]
    
    vPre = profile[preInd[mask],1]
    vPost = profile[postInd[mask],1]
    
    dt = np.divide(t[0][mask] - tPre, tPost - tPre)
    v[mask] = np.multiply(dt, vPost - vPre) + vPre
    
    return v

ROBOT_T = 0.16
ROBOT_L = 0.14
WHEEL_R = 0.065/2

MAX_ACC = 0.5 * WHEEL_R * 2 * math.pi
INTER_CMD_DELAY = 1

def main():
    core = Core()

    dt = 0.4

    cmdPub = core.createPublisher(RobotState, "robot_cmd", 1)

    cmdSet = [ # Type, data
        #('line', 1.2, 0.2), # ('line', d, v)
        #('arc', math.pi/2, 0.4, 0.2), # ('arc', change in yaw, r, v)
        #('line', 0.25, 0.2),
        #('arc', -math.pi, -0.4, 0.2),
        #('line', 0.25, 0.2)

        #('line', -0.35, 0.2),
        #('arc', -math.pi/2, -0.35, 0.2),
        #('line', 0.35, 0.2),
        #('arc', math.pi/2, 0.35, 0.2),
        #('arc', math.pi/2, 0.35, 0.2),
        #('line', -0.35, 0.2),


        # Kitchen Loop
        #('line', 1.8, 0.2),
        #('arc', math.pi/2, 0.3, 0.2),
        #('line', 2.0, 0.2),
        #('arc', math.pi/2, 0.3, 0.2)

        # Living Loop
        #('line', 0.6*3.5-0.1, 0.2),
        #('arc', -3*math.pi/2, -0.4, 0.2),
        #('arc', math.pi/2, 0.4, 0.2),
        #('line', 0.6*2.5-0.2, 0.2),

        # Big Loop
        # ('line', 0.6*3.5-0.1, 0.2),
        # ('arc', -2*math.pi/2, -0.4, 0.2),
        # ('line', 0.6*2.5-0.1, 0.2),
        # ('arc', math.pi/2, 0.4, 0.2),
        # ('line', 0.6*4.5-0.1, 0.2),
        # ('arc', -math.pi/2, -0.4, 0.2),
        # ('line', 0.6*3.0, 0.2),
        # ('arc', -math.pi/2, -0.4, 0.2),
        # ('line', 0.6*2.0, 0.2),
        # ('arc', -math.pi/2, -0.4, 0.2),
        # ('line', 0.6*3.0, 0.2),
        # ('arc', math.pi/2, 0.4, 0.2),
        # ('line', 0.6*3.0, 0.2),

        # Round Loop
        # ('line', 1.3, 0.2),
        # ('arc', -1*math.pi/2, -0.4, 0.2),
        # ('line', 0.8, 0.2),
        # ('arc', -1*math.pi/2, -0.4, 0.2),
        # ('line', 0.8, 0.2),
        # ('arc', -1*math.pi/2, -0.4, 0.2),
        # ('line', 0.9, 0.2),

        # Forward Loop Right
        # ('line', 0.9, 0.2),
        # ('arc', -3*math.pi/2, -0.4, 0.2),
        # ('arc', math.pi/2, 0.4, 0.2),
        # ('line', 0.1, 0.2),

        # Forward Elipse Loop
        #('line', 1.0, 0.2),
        #('arc', -2*math.pi/2, -0.4, 0.2),
        #('line', 1.0, 0.2),
        #('arc', -2*math.pi/2, -0.4, 0.2),
# ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 1.5, -0.4, -0.2), ('arc', 0.16666666666666666, -1.2, -0.2), ('line', -0.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('line', -0.2298069116689753, -0.2), ('arc', -1.6415926535897931, -0.4, 0.2), ('line', -0.12290737036520127, -0.2), ('arc', -1.0, -0.4, 0.2), ('arc', -0.16666666666666666, 1.2, -0.2), ('arc', -1.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2),
# ('arc', 0.5, -0.4, -0.2), ('arc', 1.0, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2), ('line', -0.007597658527704401, -0.2), ('arc', -0.42920367320510344, 0.4, -0.2), ('line', 0.03389108855352146, 0.2), ('arc', 1.0, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2),
# ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -2.0, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('line', -0.2581139903751992, -0.2), ('arc', 1.5707963267948966, 0.4, 0.2), ('line', -0.36290506821777035, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 2.0, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('line', 0.2, 0.2), ('arc', -0.5, -0.4, 0.2),
# ('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('line', 0.1881263373692195, 0.2), ('arc', 0.7374629934615631, 0.4, 0.2), ('line', -0.018471591665848757, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.16666666666666666, 1.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2),
# ('arc', -0.5, 0.4, -0.2), ('arc', 0.25, 0.8, 0.2), ('line', -0.217998952480899, -0.2), ('arc', -1.2249259869231266, -0.4, 0.2), ('line', 0.05763648872532047, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -3.0, 0.4, -0.2), ('arc', -0.16666666666666666, -1.2, 0.2)
#('line', 0.4464230973407943, 0.2), ('arc', -1.0, -0.4, 0.2), ('line', 0.08361577255089825, 0.2), ('line', -0.13859372631656328, -0.2), ('arc', 1.5, 0.4, 0.2), ('line', 0.054387046761442216, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.25, 0.8, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2)

#('arc', -0.25, -0.8, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -1.0, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.25, -0.8, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -1.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 1.0, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 1.5, -0.4, -0.2), ('arc', 1.0, 0.4, 0.2), ('line', 0.11505381076458991, 0.2), ('arc', 0.7374629934615635, -0.4, -0.2), ('line', 0.1015319730048609, 0.2), ('arc', -0.16666666666666666, 1.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.25, 0.8, -0.2), ('arc', 0.25, -0.8, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2),
#('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('line', -0.11359479186112197, -0.2), ('arc', -0.6415926535897931, -0.4, 0.2), ('line', -0.1145890920856908, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -1.0, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2),
#('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.25, 0.8, 0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.25, -0.8, -0.2), ('arc', 2.0, -0.4, -0.2), ('line', 0.3216581234905154, 0.2), ('arc', -1.4292036732051034, 0.4, -0.2), ('line', 0.3419947351773191, 0.2),
#('arc', 1.0, -0.4, -0.2), ('line', -0.2, -0.2), ('arc', -1.0, -0.4, 0.2), ('line', -0.03790670818057793, -0.2), ('arc', -1.0707963267948966, -0.4, 0.2), ('line', 0.02431926171755644, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -1.0, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2),
#('arc', -1.0, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -3.0, 0.4, -0.2), ('line', 0.2064701732375033, 0.2), ('arc', -1.0707963267948966, 0.4, -0.2), ('line', 0.19187032134621573, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 2.0, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2)

# ('line', 0.8853117917739576, 0.2)
#  ('arc', -2.641592653589793, -0.4, 0.2),
#  ('line', -0.17585190486986407, -0.2), 
# ('arc', -0.5, 0.4, -0.2), 
# ('arc', -1.0, -0.4, 0.2), ('arc', 1.0, 0.4, 0.2)

# ('arc', -1.0, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), 
# ('line', 0.843272158576912, 0.2), 

# ('arc', -2.141592653589793, -0.4, 0.2), ('line', -0.537233080728865, -0.2),
#  ('arc', -1.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2)

#('arc', -0.16666666666666666, -1.2, 0.2), ('line', 0.57786816515727, 0.2), ('arc', -0.8333333333333333, -0.4, 0.2), ('line', 0.6626629538382514, 0.2), ('line', -0.12449547779097965, -0.2), ('arc', -1.5, -0.4, 0.2), ('line', 0.31778920881457356, 0.2), ('line', -0.2, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('line', -0.000498467761243427, -0.2), ('arc', -0.5, -0.4, 0.2), ('line', 0.15510329492003397, 0.2), ('arc', -1.1666666666666667, 0.4, -0.2), ('line', 0.2335932490219316, 0.2), ('arc', 0.16666666666666666, -1.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2)]
# ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.16666666666666666, -1.2, 0.2), ('arc', -1.0, 0.4, -0.2), ('arc', 0.25, -0.8, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 1.0, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 1.0, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.5, 0.4, -0.2), ('line', -0.10950246543111992, -0.2), ('arc', 0.7374629934615631, 0.4, 0.2), ('line', -0.13077938097033545, -0.2), ('arc', -1.0, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.25, -0.8, -0.2), ('line', -0.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 1.0, 0.4, 0.2),
# ('arc', -0.5, 0.4, -0.2), ('arc', -0.25, -0.8, 0.2), ('arc', -1.0, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.5, 0.4, -0.2), ('line', -0.2, -0.2), ('arc', 1.0, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -1.0, -0.4, 0.2), ('arc', -1.0, 0.4, -0.2), ('line', 0.08648655174375572, 0.2), ('arc', 0.5376110196153103, -0.4, -0.2), ('line', 0.04890495855540851, 0.2), ('arc', -1.5, -0.4, 0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2),
# ('arc', 0.16666666666666666, -1.2, -0.2), ('arc', -1.0, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 1.0, 0.4, 0.2), ('line', 0.4, 0.2), ('arc', 1.0, 0.4, 0.2), ('arc', -0.25, 0.8, -0.2), ('line', 0.320346502968402, 0.2), ('arc', 1.737462993461563, -0.4, -0.2), ('line', 0.4596773621577925, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -1.0, -0.4, 0.2), ('arc', 0.25, -0.8, -0.2), ('arc', -1.0, -0.4, 0.2), ('arc', 0.16666666666666666, -1.2, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.5, 0.4, -0.2), ('arc', -0.5, -0.4, 0.2)
#('line', 0.2, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.4, -0.5, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.16666666666666666, -1.2, 0.2), ('arc', -1.5, -0.4, 0.2), ('arc', 1.5, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('line', -0.1981430303990889, -0.2), ('arc', -0.7666666666666666, 0.4, -0.2), ('line', -0.33400233536233437, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', -0.16666666666666666, 1.2, -0.2), ('arc', 0.5, 0.4, 0.2)
#('arc', -0.25, -0.8, 0.2), ('arc', 0.3076923076923077, 0.65, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.4, 0.5, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', -0.2222222222222222, -0.9, 0.2), ('arc', -0.5, -0.4, 0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -2.0, -0.4, 0.2), ('arc', -0.23529411764705882, -0.85, 0.2), ('arc', 1.0, 0.4, 0.2), ('arc', 0.5, -0.4, -0.2), ('line', 0.1271989531915971, 0.2), ('arc', 1.4998240321769734, -0.4, -0.2), ('line', 0.14405124351555076, 0.2), ('arc', -0.5, 0.4, -0.2), ('arc', 0.5, -0.4, -0.2), ('arc', 0.5, 0.4, 0.2), ('arc', -0.5, -0.4, 0.2)

('arc', 0.5, 0.4, 0.2), ('line', 1.1437336741160897, 0.2), ('arc', 0.5707963267948966, 0.4, 0.2), ('line', -0.11205228659175896, -0.2), ('arc', 0.5, 0.4, 0.2)
]
    while(not cmdPub.matched()):
        logging.info("Waiting for match...")
        time.sleep(0.5)

    for cmd in cmdSet:

        t = 0
        r = 0

        if(cmd[0] == 'line'):
            d = cmd[1]
            v = cmd[2]
            d = 1.007008*d + 0.016116
        elif(cmd[0] == 'arc'):
            r = cmd[2]
            v = cmd[3]

            dAngle = cmd[1]
            d = r*dAngle

        steeringAngle = 0
        if(r != 0):
            steeringAngle = math.atan(ROBOT_L/r)

        vProfile = linearTrapezoid(abs(d), abs(v), MAX_ACC)

        discreteProfile = linearInterp(vProfile, np.arange(0, vProfile[-1,0] + 0.5, dt))
        if(d < 0):
            discreteProfile *= -1
        logging.debug(f"Profile:\n{discreteProfile}")
        dProfile = np.sum(discreteProfile) * dt
        logging.debug(f"Area Check:{dProfile}")
        if(cmd[0] == 'arc'):
            logging.debug(f"Yaw Change Check:{(180/math.pi)*dProfile / r}")
            if(d != dProfile):
                discreteProfile *= d/dProfile
            logging.debug(f"Yaw Change Check:{(180/math.pi)*np.sum(discreteProfile) * dt / r}")
                

        for c in discreteProfile:

            data = RobotState.RobotState()
            data.velocity(c)
            data.steer_angle(steeringAngle)

            logging.info(f"Publishing {c} - {steeringAngle}. Waiting {dt} seconds")
            cmdPub.publish(data)

            time.sleep(dt)
        
        time.sleep(INTER_CMD_DELAY)
    

if __name__ == "__main__":
    main()